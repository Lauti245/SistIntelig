import java.util.*;

public class AStar {
    
    private int[][] maze;
    private boolean[][] visited;
    private PriorityQueue<Node> queue;
    private Node[][] nodes;
    private Node start;
    private Node goal;

    public AStar(int[][] maze, Node start, Node goal) {
        this.maze = maze;
        this.visited = new boolean[maze.length][maze[0].length];
        this.queue = new PriorityQueue<Node>();
        this.nodes = new Node[maze.length][maze[0].length];
        this.start = start;
        this.goal = goal;

        // Initialize all nodes
        for (int i = 0; i < maze.length; i++) {
            for (int j = 0; j < maze[0].length; j++) {
                nodes[i][j] = new Node(i, j);
            }
        }
    }

    public List<Node> findPath() {
        queue.add(start);
        start.setCostFromStart(0);
        start.setTotalCost(start.getCostFromStart() + start.getEstimatedCostToGoal());

        while (!queue.isEmpty()) {
            Node current = queue.poll();

            if (current.equals(goal)) {
                // Path found!
                List<Node> path = new ArrayList<Node>();
                while (current.getParent() != null) {
                    path.add(current);
                    current = current.getParent();
                }
                path.add(start);
                Collections.reverse(path);
                return path;
            }

            visited[current.getX()][current.getY()] = true;

            for (Node neighbor : getNeighbors(current)) {
                if (visited[neighbor.getX()][neighbor.getY()]) {
                    continue;
                }

                int costFromStart = current.getCostFromStart() + neighbor.getCost();
                if (!queue.contains(neighbor) || costFromStart < neighbor.getCostFromStart()) {
                    neighbor.setParent(current);
                    neighbor.setCostFromStart(costFromStart);
                    neighbor.setTotalCost(costFromStart + neighbor.getEstimatedCostToGoal());
                    if (queue.contains(neighbor)) {
                        queue.remove(neighbor);
                    }
                    queue.add(neighbor);
                }
            }
        }

        // No path found
        return null;
    }

    private List<Node> getNeighbors(Node node) {
        List<Node> neighbors = new ArrayList<Node>();

        int x = node.getX();
        int y = node.getY();

        if (x > 0 && maze[x-1][y] != 1) {
            neighbors.add(nodes[x-1][y]);
        }
        if (x < maze.length-1 && maze[x+1][y] != 1) {
            neighbors.add(nodes[x+1][y]);
        }
        if (y > 0 && maze[x][y-1] != 1) {
            neighbors.add(nodes[x][y-1]);
        }
        if (y < maze[0].length-1 && maze[x][y+1] != 1) {
            neighbors.add(nodes[x][y+1]);
        }

        return neighbors;
    }
}
