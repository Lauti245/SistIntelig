import java.util.*;

public class AStar {
    private static final int FILA = 60;
    private static final int COLUMNA = 80;
    private static final int OBSTACULO = 1;
    
    private static int[][] matriz = new int[FILA][COLUMNA];
    private static Nodo[][] nodos = new Nodo[FILA][COLUMNA];
    
    public static void main(String[] args) {
        // Generar la matriz de prueba
        generarmatriz();
        
        // Encontrar el camino más corto desde el punto de inicio al punto objetivo
        Random random = new Random(); 
        Nodo nodoInicio = nodos[random.nextInt(FILA)][random.nextInt(COLUMNA)];
        Nodo nodoFin = nodos[random.nextInt(FILA)][random.nextInt(COLUMNA)];
        while (matriz[nodoInicio.fil][nodoInicio.col] == OBSTACULO || nodoFin == nodoInicio) {
            nodoInicio = nodos[random.nextInt(FILA)][random.nextInt(COLUMNA)];
        }
        while (matriz[nodoFin.fil][nodoFin.col] == OBSTACULO || nodoFin == nodoInicio) {
            nodoFin = nodos[random.nextInt(FILA)][random.nextInt(COLUMNA)];
        }
        List<Nodo> path = findPath(nodoInicio, nodoFin);
        
        // Imprimir la matriz de prueba con el camino más corto resaltado
        for (int i = 0; i < FILA; i++) {
            for (int j = 0; j < COLUMNA; j++) {
                if (matriz[i][j] == OBSTACULO) {
                    System.out.print("*");
                } else if (nodos[i][j] == nodoInicio) {
                    System.out.print("I");
                } else if (nodos[i][j] == nodoFin) {
                    System.out.print("G");
                } else if (path.contains(nodos[i][j])) {
                    System.out.print("+");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
    
    // Generar la matriz de prueba con obstáculos y puntos de inicio y objetivo aleatorios
    private static void generarmatriz() {
        
    	int numObstaculos=1440;
    	Random random = new Random();
    	for(int i=0; i<numObstaculos; i++) {
    		int x = random.nextInt(60);
    		int y = random.nextInt(80);
    		
    		while(matriz[x][y]==OBSTACULO) {
    			x = random.nextInt(60);
        		y = random.nextInt(80);
    			
    		}
    		matriz[x][y]=OBSTACULO;
    	}
    	
    	for(int i=0; i<FILA; i++) {
    		for(int j=0; j<COLUMNA; j++) {
    			
    			nodos[i][j]=new Nodo(i,j);
    		}
    	}
    }
    
    // Encontrar el camino más corto desde el punto de inicio al punto objetivo
    private static List<Nodo> findPath(Nodo inicio, Nodo fin) {
        Set<Nodo> visited = new HashSet<>();
        PriorityQueue<Nodo> openList = new PriorityQueue<>(Comparator.comparingInt(Nodo::getF));
        inicio.g = 0;
        inicio.h = heuristic(inicio, fin);
        openList.add(inicio);
        
        while (!openList.isEmpty()) {
            Nodo actual = openList.poll();
            if (actual == fin) {
               return reconstructPath(actual);
        }
        visited.add(actual);
        for (Nodo vecino : getNeighbors(actual)) {
            if (visited.contains(vecino)) {
                continue;
            }
            int posibleG = actual.g + distance(actual, vecino);
            if (posibleG < vecino.g) {
                vecino.parent = actual;
                vecino.g = posibleG;
                vecino.h = heuristic(vecino, fin);
                if (!openList.contains(vecino)) {
                    openList.add(vecino);
                }
            }
        }
    }
    return new ArrayList<>();
}

// Obtener los vecinos de un nodo
private static List<Nodo> getNeighbors(Nodo nodo) {
    List<Nodo> neighbors = new ArrayList<>();
    int fil = nodo.fil;
    int col = nodo.col;
    if (fil > 0 && matriz[fil-1][col] != OBSTACULO) {
        neighbors.add(nodos[fil-1][col]);
    }
    if (fil < FILA-1 && matriz[fil+1][col] != OBSTACULO) {
        neighbors.add(nodos[fil+1][col]);
    }
    if (col > 0 && matriz[fil][col-1] != OBSTACULO) {
        neighbors.add(nodos[fil][col-1]);
    }
    if (col < COLUMNA-1 && matriz[fil][col+1] != OBSTACULO) {
        neighbors.add(nodos[fil][col+1]);
    }
    return neighbors;
}

// Calcular la distancia entre dos nodos adyacentes
private static int distance(Nodo a, Nodo b) {
    int dx = Math.abs(a.col - b.col);
    int dy = Math.abs(a.fil - b.fil);
    if (dx > dy) {
        return dy + (dx-dy);
    } else {
        return dx + (dy-dx);
    }
}

// Calcular la distancia heurística entre dos nodos
private static int heuristic(Nodo a, Nodo b) {
    int dx = Math.abs(a.col - b.col);
    int dy = Math.abs(a.fil - b.fil);
    return Math.min(dx, dy) + Math.abs(dx-dy);
}

// Reconstruir el camino desde el nodo objetivo hasta el nodo inicial
private static List<Nodo> reconstructPath(Nodo actual) {
    List<Nodo> camino = new ArrayList<>();
    while (actual != null) {
        camino.add(actual);
        actual = actual.parent;
    }
    return camino;
}

// Clase que representa un nodo en la matriz
private static class Nodo {
    public int fil;
    public int col;
    public int g; // costo desde el nodo inicial hasta este nodo
    public int h; // costo estimado desde este nodo hasta el nodo objetivo
    public Nodo parent;
    
    public Nodo(int row, int col) {
        this.fil = row;
        this.col = col;
        this.g = Integer.MAX_VALUE;
        this.h = Integer.MAX_VALUE;
        this.parent = null;
    }
    
    public int getF() {
        return g + h;
    }
}
}
